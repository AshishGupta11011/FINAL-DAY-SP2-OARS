{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Authenticate.service.ts","webpack:///src/app/Customer.ts","webpack:///src/app/Register.service.ts","webpack:///src/app/User.ts","webpack:///src/app/admin/admin.component.ts","webpack:///src/app/admin/admin.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth.guard.ts","webpack:///src/app/booking/booking.component.ts","webpack:///src/app/booking/booking.component.html","webpack:///src/app/login-customer/login-customer.component.ts","webpack:///src/app/login-customer/login-customer.component.html","webpack:///src/app/page-not-found/page-not-found.component.ts","webpack:///src/app/page-not-found/page-not-found.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/register-customer/register-customer.component.ts","webpack:///src/app/register-customer/register-customer.component.html","webpack:///src/app/token-interceptor.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AuthenticateService","http","url","user","post","pipe","errorHandler","error","localStorage","getItem","providedIn","Customer","Name","Email","Pwd","DOB","WalletBalance","ResidingAddress","Register","customer","get","put","status","User","Password","AdminComponent","selector","templateUrl","styleUrls","routes","path","redirectTo","pathMatch","component","canActivate","AppRoutingModule","forRoot","useHash","imports","AppComponent","authenticate","title","AppModule","provide","useClass","multi","declarations","providers","bootstrap","AuthGuard","router","Loggedin","navigate","BookingComponent","LoginCustomerComponent","token","UserCred","AuthenticateUser","subscribe","res","setItem","JSON","stringify","console","log","window","alert","onLogin","PageNotFoundComponent","ProfileComponent","custservice","customerModel","GetCustomerById","UpdateCustmomer","DeleteCustomer","UpdateCust","RegisterCustomerComponent","EmailAlreadyExists","Registered","AddCustomer","data","CreateCust","TokenInterceptorService","injector","next","authService","modifiedReq","clone","setHeaders","Authorization","getToken","handle","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { User } from './User';\nimport {  HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport {catchError} from \"rxjs/operators\"\nimport {throwError} from \"rxjs\"\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticateService {\n\n  url :string = 'http://localhost:53981/api/Authenticate';\n\n  constructor(private http : HttpClient) { }\n\n\n    AuthenticateUser(user : User)\n    {\n       return this.http.post<any>(this.url,user).pipe(catchError(this.errorHandler))\n    }\n\n    errorHandler(error:HttpErrorResponse)\n    {\n      return throwError(error)\n    }\n//isLoggedin\n    Loggedin(){\n      return !!(localStorage.getItem('token') )\n      \n    }\n\n    getToken(){\n      localStorage.getItem('token');\n    }\n  \n}\n","\r\n\r\nexport class Customer\r\n{\r\n    constructor(\r\n        public Name:string = '',\r\n        public Email:string = '',\r\n        public Pwd:string = '',\r\n        public DOB:Date = null,\r\n        public WalletBalance:number = null,\r\n        public ResidingAddress = ''\r\n    ){}\r\n}\r\n\r\n","import { Injectable, ErrorHandler } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http'\nimport { Customer } from './Customer';\nimport { catchError } from 'rxjs/operators'\nimport { throwError } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n//registerservice\nexport class Register {\n  // urlfake = 'http://localhost:53981/api/Customers/GetCustomerByname'\n\n  url: string = 'http://localhost:53981//api/Customers';\n\n  constructor(private http: HttpClient) { }\n\n  //Create Customer\n  AddCustomer(customer: Customer) {\n\n    return this.http.post<any>(this.url, customer).pipe(catchError(this.errorHandler))\n  }\n\n  //Get Customer By Id\n  GetCustomerById(id: number) {\n    return this.http.get<any>(this.url + `/${id}`).pipe(catchError(this.errorHandler))\n  }\n\n  //update Customer\n  UpdateCustmomer(id: number, customer: Customer) {\n    return this.http.put<any>(this.url + `/${id}`, customer).pipe(catchError(this.errorHandler))\n  }\n\n  //Delete Customer\n  DeleteCustomer(id: number) {\n    return this.http.delete<any>(this.url + `/${id}`).pipe(catchError(this.errorHandler))\n\n  }\n  \n  //method to get Customer by Email\n\n  // getCustomerByName(name:string)\n  // { \n  //   // const options = name ?{ params: new HttpParams().set('name', name) } : {};\n  //   const httpOptions = {\n  //     headers: new HttpHeaders({\n\n  //       'name': '${this.name}'\n  //     })\n  //   };\n  //   return this.http.get<any>(this.urlfake,httpOptions).pipe(catchError(this.errorHandler))\n  // }\n\n  //method to handle errors\n  errorHandler(error: HttpErrorResponse) {\n    return throwError(error.status);\n  }\n}\n","export class User\r\n{\r\n\r\n    constructor(\r\n        public Email:string = '' ,\r\n        public Password:string = ''\r\n        \r\n    )\r\n    {}\r\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>admin works!</p>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginCustomerComponent } from './login-customer/login-customer.component';\nimport { RegisterCustomerComponent } from './register-customer/register-customer.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { BookingComponent } from './booking/booking.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { AuthGuard } from './auth.guard';\nimport { ProfileComponent } from './profile/profile.component';\n\n\nconst routes: Routes = [\n  {path:'',redirectTo:'/login' ,pathMatch: 'full' },\n  {path:'booking',component: BookingComponent,canActivate : [AuthGuard]},\n  {path:'admin',component: AdminComponent , canActivate : [AuthGuard]},\n  {path:'login',component: LoginCustomerComponent},\n  {path: 'Register',component: RegisterCustomerComponent  },\n  {path: 'Profile' , component : ProfileComponent ,canActivate : [AuthGuard] },\n  {path: '**' ,component:PageNotFoundComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes,{useHash:true})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { AuthenticateService } from './Authenticate.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'OARSWebUI';\n  constructor(private authenticate : AuthenticateService){}\n}\n","<div >\n <!-- <app-login-customer></app-login-customer> -->\n<!--<app-register-customer></app-register-customer> -->\n<nav class=\"navbar navbar-expand-sm bg-secondary navbar-dark\">\n    \n        <div id=\"main\">\n            <button class=\"openbtn rounded-lg\" onclick=\"openNav()\"><i class=\"material-icons\" style=\"font-size:36px\">account_circle</i></button>  \n            \n          </div>\n    \n    <ul class=\"navbar-nav mx-auto\">\n        \n        <li>\n            <h1>OARS Airline</h1>\n        </li>\n        <li> <div class=\"navbar-brand\" href=\"#\">\n                <img style='height: 50px;width: 80px;' src=\"\\assets\\Images\\Airline.png\" alt=\"Airline\">\n        </div>\n        </li>\n    </ul>\n    <ul class=\"navbar-nav float-left\">\n        <li class=\"nav-item active \">\n            <a class=\"nav-link \"  routerLink = '/login' routerLinkActive = 'Active'>Login</a>\n        </li>\n        <li class=\"nav-item active \">\n            <a class=\"nav-link \"  routerLink = '/booking' routerLinkActive = 'Active'>Book Ticket</a>\n        </li>\n    </ul>\n</nav>\n\n\n<div id=\"mySidebar\" class=\"sidebar\">\n    <a href=\"javascript:void(0)\" class=\"closebtn\" onclick=\"closeNav()\">×</a>\n    <a href=\"#\">My Profile</a>\n    <a href=\"#\">Admin</a>\n    <a href=\"#\">My Bookings</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  \n  \n\n\n<router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms'\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginCustomerComponent } from './login-customer/login-customer.component';\nimport { RegisterCustomerComponent } from './register-customer/register-customer.component';\nimport { from } from 'rxjs';\nimport { BookingComponent } from './booking/booking.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { Register } from './Register.service';\nimport { HttpClientModule ,HTTP_INTERCEPTORS} from '@angular/common/http';\nimport { AuthenticateService } from './Authenticate.service';\nimport { AuthGuard } from './auth.guard';\nimport { TokenInterceptorService } from './token-interceptor.service';\nimport { ProfileComponent } from './profile/profile.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginCustomerComponent,\n    RegisterCustomerComponent,\n    BookingComponent,\n    AdminComponent,\n    PageNotFoundComponent,\n    ProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n    \n  ],\n  providers: [Register,AuthenticateService,AuthGuard,\n  {provide: HTTP_INTERCEPTORS,\n  useClass : TokenInterceptorService,\nmulti : true}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router} from '@angular/router';\nimport { AuthenticateService } from './Authenticate.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authenticate : AuthenticateService, private router : Router){}\n  canActivate():boolean{\n    if(this.authenticate.Loggedin()){return true}\n    else{\n      this.router.navigate(['/login']);\n      return false;\n\n    }\n  }\n \n}\n  \n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-booking',\n  templateUrl: './booking.component.html',\n  styleUrls: ['./booking.component.css']\n})\nexport class BookingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  \n\n}\n","<p>booking works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { User } from '../User';\nimport { AuthenticateService } from '../Authenticate.service';\nimport { stringify } from 'querystring';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login-customer',\n  templateUrl: './login-customer.component.html',\n  styleUrls: ['./login-customer.component.css']\n})\nexport class LoginCustomerComponent implements OnInit {\n\n  constructor(private authenticate : AuthenticateService, private router : Router) { }\n  token = \"\";\n\n  ngOnInit(): void {\n  }\n  UserCred:User = new User();\n\n  onLogin()\n  {\n    \n    this.authenticate.AuthenticateUser(this.UserCred).subscribe(\n     \n      res => {\n        localStorage.setItem(\"token\",JSON.stringify(res))\n        console.log(res)\n        this.router.navigate(['/booking']);\n\n      },\n      error => {\n        window.alert(\"Wrong User Credentials\");\n        console.log(error)\n      }\n    )\n  }\n\n\n\n\n\n\n}\n","<!-- <nav class=\"navbar navbar-expand-sm bg-secondary navbar-dark\">\n\n    <ul class=\"navbar-nav mx-auto\">\n        <li>\n            <h1>OARS Airline</h1>\n        </li>\n        <li> <a class=\"navbar-brand\" href=\"#\">\n                <img style='height: 50px;width: 80px;' src=\"\\assets\\Images\\Airline.png\" alt=\"Airline\">\n            </a>\n        </li>\n    </ul>\n    <ul class=\"navbar-nav float-left\">\n        <li class=\"nav-item active \">\n            <a class=\"nav-link \"  routerLink = '/login' routerLinkActive = 'Active'>Login</a>\n        </li>\n        <li class=\"nav-item active \">\n            <a class=\"nav-link \"  routerLink = '/booking' routerLinkActive = 'Active'>Book Ticket</a>\n        </li>\n    </ul>\n</nav> -->\n<div class=\"row \" style=\"margin: 100px;\">\n    <div class=\"column mx-auto\">\n        <div class=\"card border-primary shadow bg-white\">\n            <div class=\"card header \">\n                <img class=\"card-img-top w-25 h-25  mx-auto\" src=\"/assets/Images/User.jpg\" alt=\"User\">\n            </div>\n            <div class=\"card-body\">\n                <form #userform='ngForm'>\n                    <h4 class=\"text-center \">Login</h4>\n                    <div class=\"form-group\">\n\n                        <label for=\"email\">Email:</label>\n                        <input class=\"form-control \" name=\"email\" #email='ngModel' type=\"text\"\n                            pattern=\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\" placeholder=\"exmaple123@gmail.com\"\n                            [class.is-invalid]=\"email.invalid && email.touched\" required [(ngModel)]='UserCred.Email'>\n                        <!-- <small class=\"text-danger\" [class.d-none]=\"email.untouched || email.valid\">Invalid\n                            Username</small> -->\n                        <div *ngIf=\"email.errors && email.touched\">\n                            <small class=\"text-danger\" *ngIf=\"email.errors.pattern\">pattern is wrong</small>\n                            <small class=\"text-danger\" *ngIf=\"email.errors.required\">email is required</small>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"password\">Password</label>\n                        <input class=\"form-control\" name=\"password\" #password=\"ngModel\" type=\"password\"\n                            [class.is-invalid]=\"password.invalid && password.touched\" required\n                            [(ngModel)]='UserCred.Password'>\n                        <small class=\"text-danger\" [class.d-none]=\"password.valid || password.untouched\">Invalid\n                            password</small>\n                    </div>\n\n                    <button [disabled]=\"userform.form.invalid\" type=\"submit\" class=\" btn btn-primary mx-auto\" (click) = \"onLogin()\">Login</button>\n\n                </form>\n            </div>\n            <div class=\"crad-footer  bg-secondary\">\n                <h6 class=\"text-center\" style=\"color: aliceblue;\">New User? <a  routerLink = '/Register' routerLinkActive = 'Active'>SignUp</a></h6>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.css']\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 class=\"text-center\">404</h1>\n<h1 class=\"text-center\">PageNotFOUND</h1>\n","import { Component, OnInit } from '@angular/core';\nimport { Customer } from '../Customer';\nimport { Register } from '../Register.service';\nimport { Router } from '@angular/router';\nimport { strict } from 'assert';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  id:number ;\n  \n\n\n  customerModel: Customer = new Customer();\n  constructor(private custservice: Register , private router : Router ) { \n    this.id = 100;\n  }\n\n\n\n  ngOnInit(): void {\n    this.custservice.GetCustomerById(this.id).subscribe(\n      req => { this.customerModel = req ;},\n      error => {console.log(error)}\n      )\n\n  }\n\n  \n  UpdateCust() {\n\n    this.custservice.UpdateCustmomer(this.id,this.customerModel)\n      .subscribe(\n        \n        req => { console.log(req) ; window.alert(\"Customer Updated\")},\n        error => {console.log(error) ;}\n         \n      )\n  }\n\n  DeleteCust(){\n    this.custservice.DeleteCustomer(this.id).subscribe(\n      req => {console.log(req) ;  window.alert(\"Customer Deleted\")},\n      error => console.log(error)\n      \n    )\n  }\n\n\n}\n","<div class=\"container-fluid \">\n{{customerModel | json}}\n    <div class=\"row\">\n        <!-- {{customerModel | json}} -->\n        <div class=\" card mx-auto w-75 rounded-lg border border-success shadow  border-top-0 mt-1 mb-3\">\n\n            <div class=\"row\">\n                            <div class=\"col card-body w-50  \">\n\n\n                <form #userform=\"ngForm\" novalidate (ngSubmit)=UpdateCust()>\n\n                    <div class=\"form-group\">\n                        <label for=\"name\">Name:</label>\n                        <input type=\"text\" name=\"name\" #name=\"ngModel\" class=\"form-control\"\n                            [class.is-invalid]=\"name.invalid && name.touched\" required [(ngModel)]=\"customerModel.Name\">\n                        <small class=\"text-danger\" [class.d-none]=\"name.valid || name.untouched\">invalid\n                            Name</small>\n                    </div>\n\n\n                    <div class=\"form-group\">\n                        <label class=\"mt-2\" for=\"email\">Email:</label>\n                        <input disabled type=\"text\" name=\"email\" pattern=\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n                            #email=\"ngModel\" class=\"form-control\" [class.is-invalid]=\"email.invalid && email.touched\"\n                            required [(ngModel)]=\"customerModel.Email\">\n                        <div *ngIf=\"email.errors && email.touched\">\n                            <small class=\"text-danger\" *ngIf=\"email.errors.pattern\">pattern is wrong</small>\n                            <small class=\"text-danger\" *ngIf=\"email.errors.required\">email is required</small>\n                        </div>\n                    </div>\n\n\n                    <div class=\"form-group\">\n                        <label class=\"mt-2\" for=\"password\">Password:</label>\n                        <input type=\"password\" name=\"password\" #password=\"ngModel\" class=\"form-control\"\n                            [class.is-invalid]=\"password.invalid && password.touched\" required\n                            [(ngModel)]=\"customerModel.Pwd\">\n                        <small class=\"text-danger\" [class.d-none]=\"password.valid || password.untouched\">invalid\n                            Password</small>\n                    </div>\n\n\n                    <div class=\"form-group\">\n                        <label class=\"mt-2\" for=\"dob\">DateOfBirth:</label>\n                        <input type=\"date\" name=\"dob\" #dob=\"ngModel\" class=\"form-control\"\n                            [class.is-invalid]=\"dob.invalid && dob.touched\" required [(ngModel)]=\"customerModel.DOB \">\n                        <small class=\"text-danger\" [class.d-none]=\"dob.valid || dob.untouched\">invalid             \n                            Dateofbirth</small>\n                    </div>\n\n\n                    <div class=\"form-group\">\n                        <label class=\"mt-2\" for=\"balance\">WalletBalance:</label>\n                        <input type=\"number\" name=\"balance\" #balance=\"ngModel\" pattern=\"^[1-9]\\d*$\" class=\"form-control\"\n                            [class.is-invalid]=\"balance.invalid && balance.touched\" required\n                            [(ngModel)]=\"customerModel.WalletBalance\">\n                        <small class=\"text-danger\" [class.d-none]=\"balance.valid || balance.untouched\">invalid\n                            Amount</small>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label class=\"mt-2\" for=\"address\">Address:</label>\n                        <input type=\"text\" name=\"address\" #address=\"ngModel\" class=\"form-control\"\n                            [class.is-invalid]=\"address.invalid && address.touched\" required\n                            [(ngModel)]=\"customerModel.ResidingAddress\">\n                        <small class=\"text-danger\" [class.d-none]=\"address.valid || address.untouched\">invalid\n                            Address</small>\n                    </div>\n\n                    <div class=\" mx-auto\" style=\"width: 300px;\">\n                        <button type=\"submit\" [disabled]=\"userform.form.invalid \" class=\"btn btn-primary\">Update\n                            Account</button>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col\">\n                <h1  class=\"mt-5 ml-3\">My Profile</h1>\n                <img class=\"pt-4\" src=\"assets\\Images\\User.jpg\" alt=\"profile\">\n                <button style=\"margin-top: 200px;margin-left: 40px;\" class=\"btn btn-primary \">Delete Account</button>\n            \n        </div>\n\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Customer } from '../Customer';\nimport { Register } from '../Register.service';\nimport { error } from 'protractor';\nimport { Route } from '@angular/compiler/src/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register-customer',\n  templateUrl: './register-customer.component.html',\n  styleUrls: ['./register-customer.component.css']\n})\nexport class RegisterCustomerComponent implements OnInit {\n  public EmailAlreadyExists: boolean = false;\n  Registered: boolean = false;\n  customerModel: Customer = new Customer();\n  constructor(private custservice: Register , private router : Router ) { }\n\n\n\n  ngOnInit(): void {\n  }\n\n  CreateCust() {\n\n    this.custservice.AddCustomer(this.customerModel)\n      .subscribe(\n        \n        data => { \n          \n          if(data == 409){window.alert('Email Already Exists')};\n          if(data == 201){this.Registered = true;window.alert('User Account Created')};\n           console.log(\"Success\",data) \n\n        },\n        error => {console.log(error)  }\n         \n      )\n\n      if(this.Registered){\n        this.router.navigate(['login']);\n      }\n  }\n\n\n}\n\n\n\n\n\n","<!-- <nav class=\"navbar navbar-expand-sm bg-secondary navbar-dark\">\n\n    <ul class=\"navbar-nav mx-auto\">\n        <li>\n            <h1>OARS Airline</h1>\n        </li>\n        <li> <a class=\"navbar-brand\" href=\"#\">\n                <img style='height: 50px;width: 80px;' src=\"\\assets\\Images\\Airline.png\" alt=\"Airline\">\n            </a>\n        </li>\n    </ul>\n    <ul class=\"navbar-nav float-left\">\n        <li class=\"nav-item active \">\n            <a class=\"nav-link \"  routerLink = '/login' routerLinkActive = 'Active'>Login</a>\n        </li>\n\n    </ul>\n</nav> -->\n<div class=\"container-fluid \">\n    \n   <div class=\"row\">\n       <!-- {{customerModel | json}} -->\n       <div  class=\" card mx-auto w-75 rounded-lg border border-success shadow  border-top-0 mt-1 mb-3\">\n           <div class=\"card-header bg-primary\">\n               <h1>Create Account</h1>\n           </div>\n           \n           <div class=\"card-body w-50 mx-auto \">\n<form #userform = \"ngForm\" novalidate (ngSubmit)=CreateCust() >\n    \n    <div class=\"form-group\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" name=\"name\" #name = \"ngModel\" class=\"form-control\"  [class.is-invalid] = \"name.invalid && name.touched\" required [(ngModel)] = \"customerModel.Name\">\n        <small class=\"text-danger\" [class.d-none] = \"name.valid || name.untouched\">invalid Name</small>\n    </div>\n\n\n    <div class=\"form-group\">\n        <label class=\"mt-2\"  for=\"email\">Email:</label>\n        <input type=\"text\" name=\"email\"  pattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"  #email = \"ngModel\" class=\"form-control\"  [class.is-invalid] = \"email.invalid && email.touched\" required [(ngModel)] = \"customerModel.Email\">\n        <div *ngIf = \"email.errors && email.touched\">\n            <small class=\"text-danger\" *ngIf = \"email.errors.pattern\">pattern is wrong</small> \n            <small class=\"text-danger\" *ngIf = \"email.errors.required\">email is required</small>\n        </div>\n    </div>\n\n\n    <div class=\"form-group\">\n        <label class=\"mt-2\"  for=\"password\">Password:</label>\n         <input type=\"password\" name=\"password\" #password = \"ngModel\" class=\"form-control\"  [class.is-invalid] = \"password.invalid && password.touched\" required [(ngModel)] = \"customerModel.Pwd\">\n        <small class=\"text-danger\" [class.d-none] = \"password.valid || password.untouched\">invalid Password</small>\n    </div>\n\n \n       <div class=\"form-group\">\n        <label class=\"mt-2\" for=\"dob\">DateOfBirth:</label>\n        <input type=\"date\" name=\"dob\" #dob = \"ngModel\" class=\"form-control\"  [class.is-invalid] = \"dob.invalid && dob.touched\" required [(ngModel)] = \"customerModel.DOB\">\n        <small class=\"text-danger\" [class.d-none] = \"dob.valid || dob.untouched\">invalid Dateofbirth</small>\n    </div>\n\n\n        <div class=\"form-group\">\n        <label class=\"mt-2\" for=\"balance\">WalletBalance:</label>\n        <input type=\"number\" name=\"balance\" #balance = \"ngModel\" pattern = \"^[1-9]\\d*$\" class=\"form-control\"  [class.is-invalid] = \"balance.invalid && balance.touched\" required [(ngModel)] = \"customerModel.WalletBalance\">\n        <small class=\"text-danger\" [class.d-none] = \"balance.valid || balance.untouched\">invalid Amount</small>\n    </div>\n\n    <div class=\"form-group\">\n        <label class=\"mt-2\" for=\"address\">Address:</label>\n        <input type=\"text\" name=\"address\" #address = \"ngModel\" class=\"form-control\"  [class.is-invalid] = \"address.invalid && address.touched\" required [(ngModel)] = \"customerModel.ResidingAddress\">\n        <small class=\"text-danger\" [class.d-none] = \"address.valid || address.untouched\">invalid Address</small>\n    </div>\n\n    <div class=\" mx-auto\" style=\"width: 300px;\">\n        <button type=\"submit\" [disabled]=\"userform.form.invalid \" class=\"btn btn-primary\" >Create Account</button>\n    </div>\n</form>\n</div>\n</div>\n</div> \n</div>\n\n","import { Injectable ,Injector} from '@angular/core';\nimport { HttpInterceptor } from \"@angular/common/http\"\nimport { AuthenticateService } from './Authenticate.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenInterceptorService implements HttpInterceptor {\n\n  constructor(private injector : Injector) { }\n \n  intercept(req, next) {\n    let authService = this.injector.get(AuthenticateService)\n    let modifiedReq = req.clone(\n      {\n        setHeaders: {\n          Authorization: `Bearer ${authService.getToken()}`\n        }\n      }\n    )\n    \n    return next.handle(modifiedReq);\n\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}